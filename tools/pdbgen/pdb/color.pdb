# GIMP - The GNU Image Manipulation Program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub brightness_contrast {
    $blurb = 'Modify brightness/contrast in the specified drawable.';

    $help = <<'HELP';
This procedures allows the brightness and contrast of the specified drawable to
be modified.  Both 'brightness' and 'contrast' parameters are defined between
-127 and 127.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'brightness', type => '-127 <= int32 <= 127',
	  desc => 'Brightness adjustment' },
	{ name => 'contrast', type => '-127 <= int32 <= 127',
	  desc => 'Contrast adjustment' }
    );

    %invoke = (
        headers => [ qw("core/gimpdrawable-brightness-contrast.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable))
    success = FALSE;

  if (success)
    gimp_drawable_brightness_contrast (drawable, progress,
                                       brightness, contrast);
}
CODE
    );
}

sub levels {
    $blurb = 'Modifies intensity levels in the specified drawable.';

    $help = <<'HELP';
This tool allows intensity levels in the specified drawable to be remapped
according to a set of parameters. The low/high input levels specify an initial
mapping from the source intensities. The gamma value determines how intensities
between the low and high input intensities are interpolated. A gamma value of
1.0 results in a linear interpolation. Higher gamma values result in more
high-level intensities. Lower gamma values result in more low-level
intensities. The low/high output levels constrain the final intensity
mapping--that is, no final intensity will be lower than the low output level
and no final intensity will be higher than the high output level. This tool is
only valid on RGB color and grayscale images. It will not operate on indexed
drawables.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'channel', type => 'enum GimpHistogramChannel',
	  desc => 'The channel to modify' },
	{ name => 'low_input', type => '0 <= int32 <= 255',
	  desc => "Intensity of lowest input" },
	{ name => 'high_input', type => '0 <= int32 <= 255',
	  desc => "Intensity of highest input" },
	{ name => 'gamma', type => '0.1 <= float <= 10',
	  desc => 'Gamma correction factor' },
	{ name => 'low_output', type => '0 <= int32 <= 255',
	  desc => "Intensity of lowest output" },
	{ name => 'high_output', type => '0 <= int32 <= 255',
	  desc => "Intensity of highest output" }
    );

    %invoke = (
	headers => [ qw("core/gimpdrawable-levels.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable) ||
      (! gimp_drawable_has_alpha (drawable) &&
       channel == GIMP_HISTOGRAM_ALPHA) ||
      (gimp_drawable_is_gray (drawable) &&
       channel != GIMP_HISTOGRAM_VALUE && channel != GIMP_HISTOGRAM_ALPHA))
    success = FALSE;

  if (success)
    gimp_drawable_levels (drawable, progress,
                          channel,
                          low_input, high_input,
                          gamma,
                          low_output, high_output);
}
CODE
    );
}

sub levels_stretch {
    $blurb = 'Automatically modifies intensity levels in the specified drawable.';

    $help = <<'HELP';
This procedure allows intensity levels in the specified drawable to be
remapped according to a set of guessed parameters. It is equivalent to
clicking the "Auto" button in the Levels tool. This procedure is
only valid on RGB color and grayscale images. It will not operate on
indexed drawables.
HELP

    $author = $copyright = 'Joao S.O. Bueno, Shawn Willden';
    $date = '2003';

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' }
    );

    %invoke = (
        headers => [ qw("core/gimpdrawable-levels.h") ],
        code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable))
    success = FALSE;

  if (success)
    gimp_drawable_levels_stretch (drawable, progress);
}
CODE
    );
}

sub levels_auto {
    &std_pdb_deprecated ('gimp-levels-stretch');

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' }
    );

    %invoke = (
        headers => [ qw("core/gimpdrawable-levels.h") ],
        code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable))
    success = FALSE;

  if (success)
    gimp_drawable_levels_stretch (drawable, progress);
}
CODE
    );
}

sub posterize {
    $blurb = 'Posterize the specified drawable.';

    $help = <<'HELP';
This procedures reduces the number of shades allows in each intensity channel
to the specified 'levels' parameter.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'levels', type => '2 <= int32 <= 255',
	  desc => 'Levels of posterization' }
    );

    %invoke = (
        headers => [ qw("core/gimpdrawable-posterize.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable))
    success = FALSE;

  if (success)
    gimp_drawable_posterize (drawable, progress, levels);
}
CODE
    );
}

sub desaturate {
    $blurb = 'Desaturate the contents of the specified drawable.';

    $help = <<'HELP';
This procedure desaturates the contents of the specified drawable. This
procedure only works on drawables of type RGB color.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' }
    );

    %invoke = (
	headers => [ qw("core/gimpdrawable-desaturate.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      ! gimp_drawable_is_rgb (drawable))
    success = FALSE;

  if (success)
    gimp_drawable_desaturate (drawable, progress, GIMP_DESATURATE_LIGHTNESS);
}
CODE
    );
}

sub desaturate_full {
    $blurb = <<'BLURB';
Desaturate the contents of the specified drawable, with the specified formula.
BLURB

    $help = <<'HELP';
This procedure desaturates the contents of the specified drawable,
with the specified formula. This procedure only works on drawables of
type RGB color.
HELP

    $author = $copyright = 'Karine Delvare';
    $date = '2005';
    $since = '2.4';

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'desaturate_mode', type => 'enum GimpDesaturateMode',
	  desc => 'The formula to use to desaturate' }
    );

    %invoke = (
	headers => [ qw("core/gimpdrawable-desaturate.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      ! gimp_drawable_is_rgb (drawable))
    success = FALSE;

  if (success)
    gimp_drawable_desaturate (drawable, progress, desaturate_mode);
}
CODE
    );
}

sub equalize {
    $blurb = 'Equalize the contents of the specified drawable.';

    $help = <<'HELP';
This procedure equalizes the contents of the specified drawable. Each intensity
channel is equalized independently. The equalized intensity is given as inten'
= (255 - inten). Indexed color drawables are not valid for this operation. The
'mask_only' option specifies whether to adjust only the area of the image
within the selection bounds, or the entire image based on the histogram of the
selected area. If there is no selection, the entire image is adjusted based on
the histogram for the entire image.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'mask_only', type => 'boolean',
	  desc => 'Equalization option' }
    );

    %invoke = (
	headers => [ qw("core/gimpdrawable-equalize.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable))
    success = FALSE;

  if (success)
    gimp_drawable_equalize (drawable, mask_only);
}
CODE
    );
}

sub invert {
    $blurb = 'Invert the contents of the specified drawable.';

    $help = <<'HELP';
This procedure inverts the contents of the specified drawable. Each intensity
channel is inverted independently. The inverted intensity is given as inten' =
(255 - inten). Indexed color drawables are not valid for this operation.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' }
    );

    %invoke = (
	headers => [ qw("core/gimpdrawable-invert.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable))
    success = FALSE;

  if (success)
    gimp_drawable_invert (drawable, progress);
}
CODE
    );
}

sub curves_spline {
    $blurb = 'Modifies the intensity curve(s) for specified drawable.';

    $help = <<'HELP';
Modifies the intensity mapping for one channel in the specified drawable. The
drawable must be either grayscale or RGB, and the channel can be either an
intensity component, or the value. The 'control_pts' parameter is an array of
integers which define a set of control points which describe a Catmull Rom
spline which yields the final intensity curve. Use the gimp_curves_explicit()
function to explicitly modify intensity levels.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'channel', type => 'enum GimpHistogramChannel',
	  desc => 'The channel to modify' },
	{ name => 'control_pts', type => 'int8array',
	  desc => 'The spline control points: { cp1.x, cp1.y, cp2.x, cp2.y,
		   ... }',
	  array => { name => 'num_points', type => '4 <= int32 <= 34',
		     desc => 'The number of values in the control point array' }
       }
    );

    %invoke = (
	headers => [ qw("core/gimpdrawable-curves.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable) || (num_points & 1) ||
      (! gimp_drawable_has_alpha (drawable) &&
       channel == GIMP_HISTOGRAM_ALPHA) ||
      (gimp_drawable_is_gray (drawable) &&
       channel != GIMP_HISTOGRAM_VALUE && channel != GIMP_HISTOGRAM_ALPHA))
    success = FALSE;

  if (success)
    gimp_drawable_curves_spline (drawable, progress,
                                 channel, control_pts, num_points);
}
CODE
    );
}

sub curves_explicit {
    $blurb = 'Modifies the intensity curve(s) for specified drawable.';

    $help = <<'HELP';
Modifies the intensity mapping for one channel in the specified drawable. The
drawable must be either grayscale or RGB, and the channel can be either an
intensity component, or the value. The 'curve' parameter is an array of bytes
which explicitly defines how each pixel value in the drawable will be modified.
Use the gimp_curves_spline() function to modify intensity levels with Catmull
Rom splines.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'channel', type => 'enum GimpHistogramChannel',
	  desc => 'The channel to modify' },
	{ name => 'curve', type => 'int8array',
	  desc => 'The explicit curve',
	  array => { name => 'num_bytes',
		     desc => 'The number of bytes in the new curve (always
			      256)' } }
    );

    %invoke = (
	headers => [ qw("core/gimpdrawable-curves.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable) || (num_bytes != 256) ||
      (! gimp_drawable_has_alpha (drawable) &&
       channel == GIMP_HISTOGRAM_ALPHA) ||
      (gimp_drawable_is_gray (drawable) &&
       channel != GIMP_HISTOGRAM_VALUE && channel != GIMP_HISTOGRAM_ALPHA))
    success = FALSE;

  if (success)
    gimp_drawable_curves_explicit (drawable, progress,
                                   channel, curve, num_bytes);
}
CODE
    );
}

sub color_balance {
    $blurb = 'Modify the color balance of the specified drawable.';

    $help = <<'HELP';
Modify the color balance of the specified drawable. There are three axis which
can be modified: cyan-red, magenta-green, and yellow-blue. Negative values
increase the amount of the former, positive values increase the amount of the
latter. Color balance can be controlled with the 'transfer_mode' setting, which
allows shadows, mid-tones, and highlights in an image to be affected
differently. The 'preserve-lum' parameter, if TRUE, ensures that the
luminosity of each pixel remains fixed.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'transfer_mode', type => 'enum GimpTransferMode',
	  desc => 'Transfer mode' },
	{ name => 'preserve_lum', type => 'boolean',
	  desc => 'Preserve luminosity values at each pixel' },
	{ name => 'cyan_red', type => '-100 <= float <= 100',
	  desc => 'Cyan-Red color balance' },
	{ name => 'magenta_green', type => '-100 <= float <= 100',
	  desc => 'Magenta-Green color balance' },
	{ name => 'yellow_blue', type => '-100 <= float <= 100',
	  desc => 'Yellow-Blue color balance' }
    );

    %invoke = (
	headers => [ qw("core/gimpdrawable-color-balance.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable))
    success = FALSE;

  if (success)
    gimp_drawable_color_balance (drawable, progress,
                                 transfer_mode,
                                 cyan_red, magenta_green, yellow_blue,
                                 preserve_lum);
}
CODE
    );
}

sub colorize {
    $blurb = 'Render the drawable as a grayscale image seen through a colored glass.';

    $help = <<'HELP';
Desaturates the drawable, then tints it with the specified color. This tool is
only valid on RGB color images. It will not operate on grayscale or indexed
drawables.
HELP

    &neo_pdb_misc('2004', '2.2');

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'hue', type => '0 <= float <= 360',
	  desc => 'Hue in degrees' },
	{ name => 'saturation', type => '0 <= float <= 100',
	  desc => 'Saturation in percent' },
	{ name => 'lightness', type => '-100 <= float <= 100',
	  desc => 'Lightness in percent' }
    );

    %invoke = (
	headers => [ qw("core/gimpdrawable-colorize.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      ! gimp_drawable_is_rgb (drawable))
    success = FALSE;

  if (success)
    gimp_drawable_colorize (drawable, progress,
                            hue, saturation, lightness);
}
CODE
    );
}

sub histogram {
    $blurb = <<'BLURB';
Returns information on the intensity histogram for the specified drawable.
BLURB

    $help = <<'HELP';
This tool makes it possible to gather information about the intensity histogram
of a drawable. A channel to examine is first specified. This can be either
value, red, green, or blue, depending on whether the drawable is of type color
or grayscale. The drawable may not be indexed. Second, a range of intensities
are specified. The gimp_histogram() function returns statistics based on the
pixels in the drawable that fall under this range of values. Mean, standard
deviation, median, number of pixels, and percentile are all returned.
Additionally, the total count of pixels in the image is returned. Counts of
pixels are weighted by any associated alpha values and by the current selection
mask. That is, pixels that lie outside an active selection mask will not be
counted. Similarly, pixels with transparent alpha values will not be counted.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'channel', type => 'enum GimpHistogramChannel',
	  desc => 'The channel to modify' },
	{ name => 'start_range', type => '0 <= int32 < 256',
	  desc => 'Start of the intensity measurement range' },
	{ name => 'end_range', type => '0 <= int32 < 256',
	  desc => 'End of the intensity measurement range' }
    );

    @outargs = (
	{ name => 'mean', type => 'float', void_ret => 1,
	  desc => 'Mean intensity value' },
	{ name => 'std_dev',  type => 'float',
	  desc => 'Standard deviation of intensity values' },
	{ name => 'median',  type => 'float',
	  desc => 'Median intensity value' },
	{ name => 'pixels',  type => 'float',
	  desc => 'Alpha-weighted pixel count for entire image' },
	{ name => 'count',  type => 'float',
	  desc => 'Alpha-weighted pixel count for range' },
	{ name => 'percentile',  type => 'float',
	  desc => 'Percentile that range falls under' }
    );

    %invoke = (
	headers => [ qw("base/gimphistogram.h"
                        "core/gimpdrawable-histogram.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, FALSE, error) ||
      gimp_drawable_is_indexed (drawable) ||
      (! gimp_drawable_has_alpha (drawable) &&
       channel == GIMP_HISTOGRAM_ALPHA) ||
      (gimp_drawable_is_gray (drawable) &&
       channel != GIMP_HISTOGRAM_VALUE && channel != GIMP_HISTOGRAM_ALPHA))
    success = FALSE;

  if (success)
    {
      GimpHistogram *histogram = gimp_histogram_new ();

      gimp_drawable_calculate_histogram (drawable, histogram);

      mean       = gimp_histogram_get_mean (histogram, channel,
		 			    start_range, end_range);
      std_dev    = gimp_histogram_get_std_dev (histogram, channel,
					       start_range, end_range);
      median     = gimp_histogram_get_median (histogram, channel,
					      start_range, end_range);
      pixels     = gimp_histogram_get_count (histogram, channel, 0, 255);
      count      = gimp_histogram_get_count (histogram, channel,
                                             start_range, end_range);
      percentile = count / pixels;

      gimp_histogram_unref (histogram);
    }
}
CODE
    );
}

sub hue_saturation {
    $blurb = <<'BLURB';
Modify hue, lightness, and saturation in the specified drawable.
BLURB

    $help = <<'HELP';
This procedures allows the hue, lightness, and saturation in the specified
drawable to be modified. The 'hue-range' parameter provides the capability to
limit range of affected hues.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'hue_range', type => 'enum GimpHueRange',
	  desc => 'Range of affected hues' },
	{ name => 'hue_offset', type => '-180 <= float <= 180',
	  desc => 'Hue offset in degrees' },
	{ name => 'lightness', type => '-100 <= float <= 100',
	  desc => 'Lightness modification' },
	{ name => 'saturation', type => '-100 <= float <= 100',
	  desc => 'Saturation modification' }
    );

    %invoke = (
	headers => [ qw("core/gimpdrawable-hue-saturation.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable))
    success = FALSE;

  if (success)
    gimp_drawable_hue_saturation (drawable, progress,
                                  hue_range, hue_offset, saturation, lightness);
}
CODE
    );
}

sub threshold {
    $blurb = 'Threshold the specified drawable.';

    $help = <<'HELP';
This procedures generates a threshold map of the specified drawable. All pixels
between the values of 'low_threshold' and 'high_threshold' are replaced with
white, and all other pixels with black.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'drawable', type => 'drawable',
	  desc => 'The drawable' },
	{ name => 'low_threshold', type => '0 <= int32 <= 255',
	  desc => 'The low threshold value' },
	{ name => 'high_threshold', type => '0 <= int32 <= 255',
	  desc => 'The high threshold value' }
    );

    %invoke = (
	headers => [ qw("core/gimpdrawable-threshold.h") ],
	code => <<'CODE'
{
  if (! gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) ||
      ! gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error) ||
      gimp_drawable_is_indexed (drawable) ||
      (low_threshold > high_threshold))
    success = FALSE;

  if (success)
    gimp_drawable_threshold (drawable, progress,
                             low_threshold, high_threshold);
}
CODE
    );
}


@headers = qw("core/gimpdrawable.h"
              "gimppdb-utils.h"
              "gimp-intl.h");

@procs = qw(brightness_contrast
            levels levels_auto levels_stretch
            posterize
            desaturate desaturate_full
            equalize
            invert
            curves_spline curves_explicit
            color_balance
            colorize
            histogram
            hue_saturation
            threshold);

%exports = (app => [@procs], lib => [@procs]);

$desc = 'Color';
$doc_title = 'gimpcolor';
$doc_short_desc = 'Functions for manipulating color.';
$doc_long_desc = 'Functions for manipulating color, including curves and histograms.';

1;
